'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var log = function log(_ref) {
  var debug = _ref.debug;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (debug) {
      var _console;

      var msg = args[0],
          otherArgs = args.slice(1);


      (_console = console).log.apply(_console, ["anonymousId." + msg].concat(_toConsumableArray(otherArgs)));
    }
  };
};

var dec2hex = [];

for (var i = 0; i <= 15; i++) {
  dec2hex.push(i.toString(16));
}

function uuid() {
  var value = '';

  for (var i = 1; i <= 36; i++) {
    if (i === 9 || i === 14 || i === 19 || i === 24) {
      value += '-';
    } else if (i === 15) {
      value += 4;
    } else if (i === 20) {
      value += dec2hex[Math.random() * 4 | 0 + 8];
    } else {
      value += dec2hex[Math.random() * 15 | 0];
    }
  }

  return value;
}

var uuidV4 = uuid;

var segment = {
  stores: ['cookie', 'localStorage'],
  key: 'ajs_anonymous_id',
  generateId: function generateId() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ajs';
    return [prefix, uuidV4()].join('-');
  },
  mutate: true,
  persist: true
};

var presets = {
  segment: segment
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function getAll() {
  var cookie = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var cookieParts = cookie.split('; ');
  var cookies = {};

  if (cookieParts.length === 0 || cookieParts.length === 1 && cookieParts[0] === '') {
    return cookies;
  }

  for (var i = 0; i < cookieParts.length; i++) {
    var _cookieParts$i$split = cookieParts[i].split('='),
        _cookieParts$i$split2 = _slicedToArray(_cookieParts$i$split, 2),
        key = _cookieParts$i$split2[0],
        value = _cookieParts$i$split2[1];

    // remove quotes from stringified id


    cookies[key] = (decodeURIComponent(value) || '').replace(/"/g, '');
  }

  return cookies;
}

function get() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var key = opts.key,
      cookie = opts.cookie;

  var cookies = getAll(cookie);

  return cookies[key];
}

function browserSet(_ref) {
  var name = _ref.name,
      value = _ref.value,
      expires = _ref.expires,
      domain = _ref.domain,
      path = _ref.path,
      secure = _ref.secure;

  var valueToUse = void 0;

  if (value !== undefined && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') valueToUse = JSON.stringify(value);else valueToUse = encodeURIComponent(value);

  document.cookie = name + '=' + valueToUse + (expires ? '; expires=' + new Date(expires).toUTCString() : '') + '; path=' + (path || '/') + (domain ? '; domain=' + domain : '') + (secure ? '; secure' : '');
}

function set() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var key = opts.key,
      id = opts.id,
      mutate = opts.mutate,
      domain = opts.domain;
  var cookie = opts.cookie;

  var isBrowser = false;

  try {
    cookie = document.cookie;
    isBrowser = true;
  } catch (err) {
    // silence dom error
    cookie = '';
  }

  if (isBrowser) {
    browserSet({ name: key, value: id, path: '/', domain: domain });
  }

  if (!mutate) {
    cookie = '' + cookie;
  }

  var newCookie = key + '=' + encodeURIComponent(id);

  return [cookie, newCookie].filter(Boolean).join('; ');
}

var cookie = {
  get: get,
  set: set
};

function get$1() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var key = opts.key,
      _opts$localStorage = opts.localStorage,
      localStorage = _opts$localStorage === undefined ? {} : _opts$localStorage;


  return localStorage.getItem ? localStorage.getItem(key) : localStorage[key];
}

function set$1() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var key = opts.key,
      id = opts.id,
      _opts$localStorage2 = opts.localStorage,
      localStorage = _opts$localStorage2 === undefined ? {} : _opts$localStorage2,
      mutate = opts.mutate;

  var storage = mutate ? localStorage : Object.assign({}, localStorage);

  if (storage.setItem) {
    storage.setItem(key, id);
  } else {
    storage[key] = id;
  }

  return storage;
}

var localStorage = {
  get: get$1,
  set: set$1
};

var stores = {
  get: {
    cookie: cookie.get,
    localStorage: localStorage.get
  },
  set: {
    cookie: cookie.set,
    localStorage: localStorage.set
  }
};

var storeSetters = stores.set;


var set$2 = function set() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var id = opts.id,
      debug = opts.debug,
      _opts$preset = opts.preset,
      preset = _opts$preset === undefined ? 'segment' : _opts$preset,
      cookie = opts.cookie,
      localStorage = opts.localStorage,
      domain = opts.domain;

  var log$$1 = log({ debug: debug });

  if (!presets[preset]) {
    // TODO: notify unknown preset
    preset = 'segment';
  }

  var _presets$preset = presets[preset],
      generateId = _presets$preset.generateId,
      key = _presets$preset.key,
      stores$$1 = _presets$preset.stores,
      mutate = _presets$preset.mutate;


  if (!id) {
    id = generateId();
    log$$1('set: created new id {id: "' + id + '"}');
  } else {
    log$$1('set: using {id: "' + id + '"}');
  }

  var result = void 0;

  if (!localStorage) {
    try {
      localStorage = window.localStorage;
    } catch (err) {
      // silence window error
    }
  }

  try {
    result = storeId({
      debug: debug,
      key: key,
      id: id,
      stores: stores$$1,
      mutate: mutate,
      cookie: cookie,
      localStorage: localStorage,
      domain: domain
    });
    result.status = 'success';
  } catch (error) {
    log$$1('set: error', error);
    result = {
      status: 'error',
      error: error
    };
  }

  return result;
};

function storeId() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var debug = opts.debug,
      key = opts.key,
      id = opts.id,
      stores$$1 = opts.stores,
      mutate = opts.mutate,
      cookie = opts.cookie,
      localStorage = opts.localStorage,
      domain = opts.domain;

  var result = {};
  var log$$1 = log({ debug: debug });

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = stores$$1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var store = _step.value;

      try {
        var storeSet = storeSetters[store];
        var value = storeSet({ key: key, id: id, mutate: mutate, cookie: cookie, localStorage: localStorage, domain: domain });

        if (value) {
          log$$1('set.' + store + ': success {id: "' + id + '"}');
          result[store] = value;
        } else {
          log$$1('set.' + store + ': fail {id: "' + id + '"}');
        }
      } catch (err) {
        // TODO: Handle unknown error trying to store id
        log$$1('set.' + store + ': fail {id: "' + id + '"}');
        console.error(err);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

var storeGetters = stores.get;


var get$2 = function get() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var debug = opts.debug,
      _opts$preset = opts.preset,
      preset = _opts$preset === undefined ? 'segment' : _opts$preset,
      _opts$env = opts.env,
      env = _opts$env === undefined ? '' : _opts$env,
      cookie = opts.cookie,
      localStorage = opts.localStorage;

  var log$$1 = log({ debug: debug });

  if (!presets[preset]) {
    // TODO: notify unknown preset
    preset = 'segment';
  }

  var _presets$preset = presets[preset],
      generateId = _presets$preset.generateId,
      key = _presets$preset.key,
      stores$$1 = _presets$preset.stores,
      persist = _presets$preset.persist;


  if (isBrowser({ env: env })) {
    if (!localStorage) {
      try {
        localStorage = window.localStorage;
      } catch (err) {
        // silence error
      }
    }

    if (!cookie) {
      try {
        cookie = document.cookie;
      } catch (err) {
        // silence error
      }
    }

    var browserId = getBrowserId({
      debug: debug,
      stores: stores$$1,
      key: key,
      cookie: cookie,
      localStorage: localStorage
    });

    if (browserId) {
      log$$1('get: found browser id {id: "' + browserId + '"}');
      return browserId;
    }
  }

  var newId = generateId();

  if (persist) {
    log$$1('get: persisting new id {id: "' + newId + '"}');

    set$2({
      debug: debug,
      key: key,
      id: newId,
      // pass references directly
      cookie: opts.cookie,
      localStorage: opts.localStorage
    });
  }

  return newId;
};

function isBrowser() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var env = opts.env;


  return env === 'browser' || typeof window !== 'undefined';
}

function getBrowserId(_ref) {
  var debug = _ref.debug,
      stores$$1 = _ref.stores,
      key = _ref.key,
      cookie = _ref.cookie,
      localStorage = _ref.localStorage;

  var log$$1 = log({ debug: debug });

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = stores$$1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var store = _step.value;

      var storeGet = storeGetters[store];
      var value = storeGet({ key: key, cookie: cookie, localStorage: localStorage });

      if (value) {
        log$$1('get.browser: hit {store: "' + store + '", key: "' + key + '"}');
        return value;
      } else {
        log$$1('get.browser: miss {store: "' + store + '", key: "' + key + '"}');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return '';
}

var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function anonymousId(opts) {
  if (typeof opts === 'string' || typeof opts === 'number') {
    return set$2({ id: opts });
  } else if ((typeof opts === 'undefined' ? 'undefined' : _typeof$1(opts)) === 'object') {
    if (typeof opts.id !== 'undefined') {
      return set$2(opts);
    } else {
      return get$2(opts);
    }
  } else {
    return get$2();
  }
}

anonymousId.get = get$2;
anonymousId.set = set$2;

var src = anonymousId;

module.exports = src;
//# sourceMappingURL=index.js.map
